#!/bin/bash
# \file ******************************************************************
#\n\b File:        plot-file
#\n\b Author:      Doug Springer
#\n\b Company:     DNK Designs Inc.
#\n\b Date:        12/18/2010  6:49 am
#\n\b Description: Plot a file with format X Y
#*/ /************************************************************************
# This file is part of OpenGPIB.
#
#    OpenGPIB is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License version 3 
#    as published by the Free Software Foundation. Note that permission 
#    is not granted to redistribute this program under the terms of any
#    other version of the General Public License.
#
#    OpenGPIB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with OpenGPIB.  If not, see <http://www.gnu.org/licenses/>.
#    
#		The License should be in the file called COPYING.

#set multiplot
#set yrange[-11.358404:21.699175]
#set origin 0,0.75
#set size 1,0.25
#set bmargin 0
#set tmargin 1
#set format x ""
#set xlabel ""

#plot 'p1.ch1' every ::3 title "CH1" ls 1  with lines
#set yrange[-11.358404:21.699175]
#set origin 0,0.5
#set size 1,0.25
#set bmargin 0
#set tmargin 0
#set format x ""
#set xlabel ""


#plot 'p1.ch2' every ::3 title "CH2" ls 2  with lines
#set yrange[-11.358404:21.699175]
#set origin 0,0.25
#set size 1,0.25
#set bmargin 0
#set tmargin 0
#set format x ""
#set xlabel ""
#plot 'p1.ch3' every ::3 title "CH3" ls 3  with lines
#set yrange[-11.358404:21.699175]
#set origin 0,0
#set size 1,0.25
#set bmargin 0
#set tmargin 0
#set format x ""
#set xlabel ""
#plot 'p1.ch4' every ::3 title "CH4" ls 4  with lines
WDIR=$(dirname $0)
float_scale=12
. "$WDIR/bcommon"
CWD=$(pwd)
#echo "WDIR=$WDIR"
# These are intended to match the colors on the HP1653x channels. These do
# match two 16532 cards tied together above two 16534 cards tied together.
get_rgb (){
	case $1 in
	 1) RGB="\"#0000FF\"";;#blu
	 2) RGB="\"#FF0000\"";;#red
	 3) RGB="\"#DDDD00\"";;#DKyel
	 4) RGB="\"#00D000\"";;#grn
	 5) RGB="\"#05FFFF\"";;#cyn
	 6) RGB="\"#FF00FF\"";;#mag
	 7) RGB="\"#EEEE00\"";;#LtYel
	 8) RGB="\"#00FF00\"";;#LGN
	 *) RGB="\"#000000\"";;#BLK
	 esac
	 
}
# dumps the colors above into the gnuplot file
set_rgb_colors () {
	let i=1
	while [ $i -lt 9 ]; do
	  get_rgb $i
	  echo "set style line $i lt $i lc rgb $RGB lw 1">>"$plotfile"
	  let i=i+1
	done
}
# legacy code. Not used.
set_old_linestyle () {
	echo "set style line 1 lt 1 lw 2.000 pointtype 4" >>"$plotfile"
  echo "set style line 2 lt 2 lw 2.000 pointtype 4" >>"$plotfile"
  echo "set style line 3 lt 3 lw 2.000 pointtype 4" >>"$plotfile"
  echo "set style line 4 lt 4 lw 2.000 pointtype 4" >>"$plotfile"
  echo "set style line 5 lt 5 lw 2.000 pointtype 4" >>"$plotfile"
  echo "set style line 6 lt 6 lw 2.000 pointtype 4" >>"$plotfile"
  echo "set style line 7 lt 7 lw 2.000 pointtype 4" >>"$plotfile"
  echo "set style line 8 lt 8 lw 2.000 pointtype 4" >>"$plotfile"
}
# Not used
get_x11_linecolor () {
	case $plotfile in 
	  red) return 1;;
	  grn) return 2;;
	  blu) return 3;;
	  mag) return 4;; #magenta
	  cyn) return 5;; #cyan
	  brn) return 6;; #sienna
	  org) return 7;; #orange
	  pea) return 8;; #peach/coral
	  *) return 2;;
	esac
}

# file label
do_ylabel(){
  echo "set ylabel \"$1\"" >>"$plotfile"
}
# file label
do_xlabel () {
  echo "set xlabel \"$1\"">> "$plotfile"
}
# file min max
do_yrange () {
  echo "set yrange[$1:$2]" >>"$plotfile"
}
# file min max
do_xrange () {
  echo "set xrange[$1]" >>"$plotfile"
}
#file title
do_title () {
  echo "set title \"$1\"" >>"$plotfile"
}
# x y
do_trigger () {
  echo "set label 2 'T' at $1,$2 front" >>"$plotfile"
}
#  term size window_title
# types: x11 png
do_term () {
if [ "$1" = "x11" ]; then
  if [ -n "$3" ]; then
    XTITLE="title \"$3\""
   else
   XTITLE=""
  fi
  echo "set terminal x11 $XTITLE persist" >>"$plotfile"
fi
if [ "$1" = "png" ]; then
	ver=$(gnuplot --version|sed 's![^0-9]*\([0-9]*\.[0-9]*\).*!\1!'|tr -d '.')
	let x=ver # make sure it's an integer
	if [ $x -ge 46 ]; then
		echo "set terminal png medium size $2 " >>"$plotfile"
		echo "set term png background \"#FFFFFF\"" >>"$plotfile"
		echo "set linetype 1 lc rgb \"#000000\"" >>"$plotfile"
		echo "set linetype 2 lc rgb \"#404040\"" >>"$plotfile"
		echo "set linetype 3 lc rgb \"#ff0000\"" >>"$plotfile"
		echo "set linetype 4 lc rgb \"#00ff00\"" >>"$plotfile"
		echo "set linetype 5 lc rgb \"#66cdaa\"" >>"$plotfile"
		echo "set linetype 6 lc rgb \"#cdb5cd\"" >>"$plotfile"
		echo "set linetype 7 lc rgb \"#add8e6\"" >>"$plotfile"
		echo "set linetype 8 lc rgb \"#0000ff\"" >>"$plotfile"
		echo "set linetype 9 lc rgb \"#dda0dd\"" >>"$plotfile"
		echo "set linetype 10 lc rgb \"#9500d3\"" >>"$plotfile"
	else
		echo "set terminal png medium size $2 \\" >>"$plotfile"
		echo "xffffff x000000 x404040 \\">>"$plotfile"
		echo "xff0000 x00ff00 x66cdaa xcdb5cd \\">>"$plotfile"
		echo "xadd8e6 x0000ff xdda0dd x9500d3 ">>"$plotfile"
	fi
fi
}
# srcfile every title xtitle xmin xmax plottitle
# this dumps the plots into a variable.
# every is an every statment, used to skip data at top of file
plot_file () {
	# multiplot: first?"\nplot ":",\\\n"
	# single file "\nplot "
	plt=".84" #set plot area - depends on bmargin/tmargin below to get symetrical
	tbmarg="3" #top/bottom margin for title and xaxis labels/title
	adder=$(float_eval "(1-$plt)/2")
	ysz=$(float_eval "$plt/($multi)")
	yorg=$(float_eval "1-($ysz*$fileno)")
	if [ $multi -gt 1 ]; then
	 if [ $fileno -eq 1 ]; then # top graph
	   if [ -n "$7" ]; then
	     mtit="set title \"$7\"\n"
	   else
	     mtit=""
	   fi
	   marg="${mtit}set bmargin 0\nset tmargin $tbmarg\nset format x \"\"\nunset xlabel\n"
	   yorg=$(float_eval "$yorg-$adder")
	   ysz=$(float_eval "$ysz+$adder")
	 else
	   if [ $fileno -eq $multi ]; then #bottom graph
	     #marg="set xlabel \"$4\"\nset bmargin 3\nset tmargin 0\nset xrange [$5:$6]\n"
	     marg="set xlabel \"$4\"\nset bmargin $tbmarg\nset tmargin 0\nset xlabel \"$4\"\nset format x \"%.2sE%.0S\"\n"
	     yorg=$(float_eval "$yorg-(2*$adder)")
	     ysz=$(float_eval "$ysz+$adder")
	   else #middle graph
	     yorg=$(float_eval "$yorg-$adder")
	     marg="set bmargin 0\nset tmargin 0\nset title \"\"\nset format x \"\"\nunset xlabel\n"
	   fi
	 fi  
	 ymid=$(float_eval "$yorg+($ysz/2)")
	 get_rgb $fileno
	 
  #echo "set label 100 \"LAB$fileno\" at graph -.139,$ymid tc rgb $RGB">>"$plotfile"
#set origin 0,0.75
#set size 1,0.25
#set bmargin 0
#set tmargin 1
#set format x ""
#set xlabel ""

	  mthis="set origin 0,$yorg\nset size 1,$ysz\n"
	else
	  mthis=""
	  mcom=""
	fi 
	tmp="plot '$1' $2 title \"$3\" ls $fileno $SMOOTHING with lines"

	if [ $multi -gt 1 ]; then
	  echo -e "$marg$mthis$tmp" >> "$plotfile"
	else
	  echo -e "$tmp" >>"$plotfile"
	fi
	let fileno=fileno+1
	}
# type out
plot_all () {
 if [ "$1" = "png" ]; then
   gnuplot "$plotfile" > "$2"
 fi
 if [ "$1" = "x11" ]; then
   gnuplot "$plotfile"
 fi
}
set_grid () {
# remove border on top and right and set color to gray
echo "set style line 11 lc rgb '#808080' lt 1">>"$plotfile"
# 1 bot 2 left 4 top 8 right
echo "set border 15 back ls 11">>"$plotfile"
echo "set tics nomirror">>"$plotfile"
# define grid 
echo "set style line 12 lc rgb '#808080' lt 0 lw 1">>"$plotfile"
echo "set grid back ls 12">>"$plotfile"
}
#  multiplot
do_header () {
  echo "set lmargin 13" >> "$plotfile"
  echo "set tmargin 5" >>"$plotfile"
  #echo "set bmargin 5" >>"$plotfile"
  echo "set rmargin 2" >>"$plotfile"
  #echo "set xtics 0,41.000000" >>"$plotfile"
  set_rgb_colors
  set_grid

  if [ $1 -gt 1 ]; then
    if [ -n "$2" ]; then
      echo "set multiplot layout $1, 1 title \"$2\"" >>"$plotfile"
    else
      echo "set multiplot" >>"$plotfile"
    fi  
  else
    if [ -n "$2" ]; then
      echo "set title \"$2\"" >>"$plotfile"
    fi
  fi
  #plot 'pacbatshort.test' title "CH1" ls 2 with lines
  #,\
  #'series.o.series.ch2' title "CH2" ls 3 with lines,\
  #'series.o.diff' title "diff" ls 4 with lines
}
# 
do_trailer () {
	echo -e "unset multiplot\nset bmargin 20\n" >> "$plotfile"
}
find_gmaxx (){
	if [ "minmax" != "$MODE" ]; then
	  return
	fi
	let i=0
 for f in $@; do
  #xorg lasttime miny maxy
  while read a b c d; do
      if [ $i -eq 0 ]; then
        MAXT="$b"
      fi
      let i=i+1
  done << EOF
$(head -n 2 "$f")
EOF
  if float_cond "$gmaxx < $MAXT"; then
   gmaxx="$MAXT"
    #keep track of maxx of all files.
  fi
 done
}
#smoothing types: bezier  csplines acsplines 

usage() {
  echo "plot-file <options> file1 <file2 ...>"
	echo " where options are:"
	echo "  -f fmt - set format to 0, 1 , or 2 header lines. (0)"
	echo "  -g set grahpic size (640,480)"
	echo "  -k kind set plot kind to x11 or png (required)"
	echo "  -p fname set plot file to fname (required)"
	#echo "  -l type name set label to 'name', where type is:"
  echo "      x or y and in format -l \"x this is my x label\""
	echo "  -o outfile set png file to fname (requred if type is png)"
	echo "  -s x Add smoothing style x to waveform:"
	echo "     1=csplines 2=bezier 3=acsplines 4=unique 5=frequency 6=sbezier "
	echo "  -t tname plot title to tname"
	echo "  -x range set xrange to range: ex -x \"10:20\""
	exit 1
}
if [ $# -lt 1 ]; then
	useage
	exit 1
fi
let fileno=1
MODE="ready"
XRANGE=""
GSIZE="640,480"
let args=0
while  getopts f:g:k:hl:o:p:s:t:x: opt ; do
  let args=args+2
  #echo "opt=$opt arg=$OPTARG"
  case $opt in																			 
    f) case $OPTARG in
        0) MODE="ready"
           start=1;;
        1) MODE="title"
           start=2;;
        2) MODE="minmax"
           start=3;;
        *) echo "Invalid -f option $OPTARG"
           usage;;
       esac ;;
    g) GSIZE="$OPTARG";;
    k) plottype="$OPTARG"
       case $plottype in
         x11|png) ;;
         *) echo "Unknown type ($OPTARG) for -t"
                 usage;;
       esac;;
    h) usage;; 
   # l) for l in $OPTARG; do
   #      if [ "$l" = "x" ]; then
    p) plotfile="$OPTARG";;
    o) outfile="$OPTARG";;
    s) case $OPTARG in 
        1) SMOOTHING="smooth csplines";;
        2) SMOOTHING="smooth bezier";;
        3) SMOOTHING="smooth acsplines";;
        4) SMOOTHING="smooth unique";;
        5) SMOOTHING="smooth frequency";;
        6) SMOOTHING="smooth sbezier";;
        *) echo "Unknown smoothing '$OPTARG'";;
       esac
       ;;
    t) plottitle="$OPTARG" ;;
    x) XRANGE="$OPTARG";;
    *) echo "Invalid option $OPTARG"
    	usage
       exit 1
       ;;
  esac
done
if [ -z "$plotfile" ] || [ -z "$plottype" ]; then
  echo "must specify plotfile and plot type"
  usage
fi
if [ "png" = "$plottype" ] && [ -z "$outfile" ]; then
  echo "must specify out file witn plot type png"
  usage
fi
all_args=( $@ );
echo "args=$args, in=$#"
rm "$plotfile"
# set up single/multi plot
let multi=$#-$args
do_term "$plottype" "$GSIZE" "$plottitle"
while [ $args -lt $# ]; do
	if [ -n "$FILES" ]; then
		FILES="$FILES $CWD/${all_args[$args]}"
	else
		FILES="$CWD/${all_args[$args]}"
	fi
	let args=args+1
done
echo "Files=$FILES"
if [ "ready" = "$MODE" ]; then

#if [ $# -gt 1 ]; then
#  let multi=
  echo "Have $# args after getopt,args=$args"
#fi
do_header  "$multi"
set_ylabel "Volts"
for f in "$FILES"; do
  plot_file "$f" "" "CH$fileno"
done
plot_all "$plottype" "$outfile"
exit
fi
#echo "$#: $@"
#shift $args
#echo "$args: $@"
#if [ $# -gt 1 ]; then
#  let multi=$#
#fi
delay1=""
maxx="-99999"
maxy="-1000"
miny="1000"
gmaxx="0"
find_gmaxx $FILES
echo "gmaxx=$gmaxx"
# read min/max, title, and get first two X data points
for f in $FILES; do
  let i=0
  #xorg lasttime miny maxy
  while read a b c d; do
    case $i in 
     0) 
      if [ "minmax" = "$MODE" ]; then
        DELAY="$a"
        MAXT="$b"
        MINY="$c"
        MAXY="$d"
        EVERY="every ::3"
      elif [ "title" = "$MODE" ]; then
        XTITLE="$a"
        YTITLE="$b"
        EVERY="every ::2"
      fi;;
    1)
      if [ "minmax" = "$MODE" ]; then
        XTITLE="$a"
        YTITLE="$b"
      fi;;
      2) x1="$a";;
      3) x2="$a";;  
    esac
    let i=i+1
    done << EOF
$(head -n 4 "$f")
EOF
 
if [ "minmax" = "$MODE" ]; then
 if float_cond "$maxx < $MAXT"; then
   maxx="$MAXT"
 fi
 if float_cond "$maxy < $MAXY"; then
   maxy="$MAXY"
 fi 
 if float_cond "$miny > $MINY"; then
   miny="$MINY"
 fi
 if [ -z "$delay1" ]; then
   delay1="$DELAY"
 fi
fi
echo -n "$f: $MAXT ($maxx) $MINY $MAXY $XTITLE $YTITLE" 
if [ $fileno -eq 1 ]; then
   do_xlabel  "$XTITLE" "$plottitle"
   if [ -n "$XRANGE" ]; then
     do_xrange "$XRANGE"
   elif [ "minmax" = "$MODE" ]; then
     do_xrange  "0:$maxx"
   fi
  #echo -e "set bmargin 5\n" >>"$plotfile"
  do_header  "$multi"
fi
do_ylabel "$YTITLE"
# add a little headroom for the Y-axis plot
ADDER=$(float_eval "($MAXY - $MINY)*0.05")
MINY=$(float_eval "$MINY - $ADDER")
MAXY=$(float_eval "$MAXY + $ADDER")
echo " ... $ADDER $MINY $MAXY"
do_yrange "$MINY" "$MAXY"
#calculate the x data offset - two sources of offset, differing delay values
# and 32/34 scope buffer lenghts. delay is from trigger to center of screen
if float_cond "$MAXT < $gmaxx"; then
  #fixme. We assume if it's less, we are looking at the '32, which only
  # has 8000 points as opposed to the 34 with 32768 points
  #THISOFF=$(float_eval "((32768-8000)/2)*$xdelta") 
  THISOFF=$(float_eval "(($gmaxx-$MAXT)/2)")
  echo "g$gmaxx m$MAXT T$THISOFF"
  USING="using (\$1+$THISOFF):2"
  #USING="using 1:2"
else
  #save our x delta
  xdelta=$(float_eval "$x2-$x1")
  USING="using 1:2"
fi
plot_file "$f" "$USING $EVERY" "CH$fileno" "$XTITLE" "0" "$maxx" "$plottitle"
done 
#file loop

do_trailer
#do_xlabel  "$XTITLE"

plot_all "$plottype" "$outfile"

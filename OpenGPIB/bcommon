# \file ******************************************************************
#\n\b File:        bcommon
#\n\b Author:      Doug Springer
#\n\b Company:     DNK Designs Inc.
#\n\b Date:        04/20/2012 
#\n\b Description: common functions for bash scripts.
# Much of this code was found on the 'net. URLs given where parts of code
# were found.
#*/ /************************************************************************
# This file is part of OpenGPIB.
#
#    OpenGPIB is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License version 3 
#    as published by the Free Software Foundation. Note that permission 
#    is not granted to redistribute this program under the terms of any
#    other version of the General Public License.
#
#    OpenGPIB is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with OpenGPIB.  If not, see <http://www.gnu.org/licenses/>.
#    
#		The License should be in the file called COPYING.
#
# URL http://www.unix.com/shell-programming-scripting/74198-bash-scientific-notation.html
# convert from exponential to BC numbers...
exp2bc (){
bexp=$(echo "$*"|sed 's!\([0-9]*\(\.[0-9]*\)\?\)[eE]+\?\(-\?[0-9]*\)!(\1*10^\3)!g')
}
#URL http://www.linuxjournal.com/content/floating-point-math-bash
# Author: Mitch Frazier License is GPLv2
#####################################################################
# Evaluate a floating point number expression.

float_eval()
{
    local stat=0
    local result=0.0
    if [[ $# -gt 0 ]]; then
        #convert exponential
        exp2bc $*
        result=$(echo "scale=$float_scale; $bexp" | bc -q 2>/dev/null)
        stat=$?
        if [[ $stat -eq 0  &&  -z "$result" ]]; then stat=1; fi
    fi
    echo $result
    return $stat
}

function float_cond()
{
    local cond=0
    if [[ $# -gt 0 ]]; then
        exp2bc $*
        cond=$(echo "$bexp" | bc -q 2>/dev/null)
        if [[ -z "$cond" ]]; then cond=0; fi
        if [[ "$cond" != 0  &&  "$cond" != 1 ]]; then cond=0; fi
    fi
    local stat=$((cond == 0))
    return $stat
}

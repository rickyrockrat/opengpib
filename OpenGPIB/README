This is the OpenGPIB library, written from scratch by rickyrockrat
(gpib at rickyrockrat dot com).
What is amazing is that most of it works and actually produces useful 
data.

There are other efforts out there but none that really supported Linux. 

Notable sites such as http://www.ke5fx.com (Windows only) and 
http://www.ko4bb.com/ (RF site) should be referenced.

There was some attempt to write a wrapper for the graphics library
for the GPIB Toolkit the ke5fx offers, however it would have taken
a lot of testing using a Windows box, and I have very little patience
with Windows these days.  Besides, I had to get some work done (i.e.
data out of my test equipment).

The web page is http://opengpib.sourceforge.net. 


All the tools should accept -h for a usage page.

Here are some useful invocations of the tools:

Network Analyzer
/networkanalyzer -a s9 -a a18 -d s/dev/ttyUSB0 -d a/dev/ttyUSB1 -f s1 -f e2000 -i 1000 -m c -l s10  -f f -c cablecal10.cal
Signal generator on /dev/ttyUSB0, address 9, Analyzer on /dev/ttyUSB1, address 18
Start frequency 1Mhz, end frequency 2000Mhz, increment of 1000kHz, mode is calibration, level is 10dbm

The -f f sets a follow mode (see usage).

Extract a 1655x waveform:

Get the trace.
./get_hp_16555_waveform -d /dev/ttyUSB2 -t foo.dat
Get the configuration:
./get_hp_16555_waveform -d /dev/ttyUSB2 -c foo.cfg

Parse the trace file into a format la2vcd can use:
./parse_16500_config -d foo.dat  -f foo.la

Convert the trace to a vcd:
la2vcd -td 2ns -r 16 -b 32 -sf 31 CLK -sf 29-24 RED -sf 11 STVD -sf 10 STVU -sf 9 CLKV -sf 7 OE -sf 5 LD -sf 3 POL -sf 1 DIO2 -sf 0 DIO1 foo.la -o foo.vcd 

Extract a Tek 2440 waveform (extracts to base.ch1 base.ch2 base.cursors):
./get_tek_waveform -a 9 -c ch1 -c ch2 -c cursors -d /dev/ttyUSB1 -o base


Manipulate and display the tek data:

tek2gplot
This will add additional plots using a function. Available functions as of 0.1 are:

diff
max-y
min-y
pk-pk

see makepng for an invocation that will generate a png. Leave terminal type off for
and Xwindow.

This has only been tested on a 64-bit Linux operating system, and only 2 controllers are
supported thus far.  It's prettty easy to write new controller interfaces.

Look at hp16500ip.c/h or prologixs.c/h (device implemntation) and gpib.c/h.

You add the open, read, write, close, and control function implementation, then the define
for the new controller, and it should "just work". 

Here are the steps to adding another controller:

1) The functions in the dev implementation need to be duplicated (hp16500ip.c/h or prologixs.c/h).
2) The interface type needs to be added to the enum in gpib.h (GPIB_CTL_*).
3) Add the entry in the table at the top of gpib.c (supported_dev).
4) Add the entry to the case in open_gpib.

See get_hp_16555_waveform.c to see how the option works from the table in supported_dev.
There are 2 functions that work on this table, one displays supported controllers, the 
other validates the option and returns the device type.

Feel free to email me at rickyrockrat


